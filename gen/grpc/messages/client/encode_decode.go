// Code generated by goa v3.15.2, DO NOT EDIT.
//
// messages gRPC client encoders and decoders
//
// Command:
// $ goa gen goa-grpc-web/design

package client

import (
	"context"
	messagespb "goa-grpc-web/gen/grpc/messages/pb"
	messages "goa-grpc-web/gen/messages"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSendFunc builds the remote method to invoke for "messages" service
// "send" endpoint.
func BuildSendFunc(grpccli messagespb.MessagesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Send(ctx, reqpb.(*messagespb.SendRequest), opts...)
		}
		return grpccli.Send(ctx, &messagespb.SendRequest{}, opts...)
	}
}

// EncodeSendRequest encodes requests sent to messages send endpoint.
func EncodeSendRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*messages.Message)
	if !ok {
		return nil, goagrpc.ErrInvalidType("messages", "send", "*messages.Message", v)
	}
	return NewProtoSendRequest(payload), nil
}

// BuildSubscribeFunc builds the remote method to invoke for "messages" service
// "subscribe" endpoint.
func BuildSubscribeFunc(grpccli messagespb.MessagesClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Subscribe(ctx, reqpb.(*messagespb.SubscribeRequest), opts...)
		}
		return grpccli.Subscribe(ctx, &messagespb.SubscribeRequest{}, opts...)
	}
}

// DecodeSubscribeResponse decodes responses from the messages subscribe
// endpoint.
func DecodeSubscribeResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &SubscribeClientStream{
		stream: v.(messagespb.Messages_SubscribeClient),
	}, nil
}
