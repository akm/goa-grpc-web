// Code generated by goa v3.15.2, DO NOT EDIT.
//
// messages service
//
// Command:
// $ goa gen goa-grpc-web/design

package messages

import (
	"context"
)

// Service is the messages service interface.
type Service interface {
	// Send implements send.
	Send(context.Context, *Message) (err error)
	// Subscribe to events sent such new chat messages.
	Subscribe(context.Context, SubscribeServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "notification"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "messages"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"send", "subscribe"}

// SubscribeServerStream is the interface a "subscribe" endpoint server stream
// must satisfy.
type SubscribeServerStream interface {
	// Send streams instances of "Message".
	Send(*Message) error
	// Close closes the stream.
	Close() error
}

// SubscribeClientStream is the interface a "subscribe" endpoint client stream
// must satisfy.
type SubscribeClientStream interface {
	// Recv reads instances of "Message" from the stream.
	Recv() (*Message, error)
}

// Message is the payload type of the messages service send method.
type Message struct {
	Message string
}
