// Code generated by goa v3.15.2, DO NOT EDIT.
//
// messages endpoints
//
// Command:
// $ goa gen goa-grpc-web/design

package messages

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "messages" service endpoints.
type Endpoints struct {
	Send      goa.Endpoint
	Subscribe goa.Endpoint
}

// SubscribeEndpointInput holds both the payload and the server stream of the
// "subscribe" method.
type SubscribeEndpointInput struct {
	// Stream is the server stream used by the "subscribe" method to send data.
	Stream SubscribeServerStream
}

// NewEndpoints wraps the methods of the "messages" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Send:      NewSendEndpoint(s),
		Subscribe: NewSubscribeEndpoint(s),
	}
}

// Use applies the given middleware to all the "messages" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Send = m(e.Send)
	e.Subscribe = m(e.Subscribe)
}

// NewSendEndpoint returns an endpoint function that calls the method "send" of
// service "messages".
func NewSendEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Message)
		return nil, s.Send(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "subscribe" of service "messages".
func NewSubscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*SubscribeEndpointInput)
		return nil, s.Subscribe(ctx, ep.Stream)
	}
}
